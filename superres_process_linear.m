function [superres_signal] = superres_process_linear(signal_1, signal_2, signal_3, signal_4)
%SUPERRES_PROCESS 此处显示有关此函数的摘要
%   此处显示详细说明

    % signal
    resolution = signal_1.resolution * 2;
    downsample_ratio = signal_1.downsample_ratio / 2;
    superres_signal = SensorSignal(resolution, downsample_ratio);
    superres_signal.shift_vector = signal_1.shift_vector;
    superres_signal.T_0 = signal_1.T_0;

    % super-res
    superres_signal.F1_VTX1 = img_superres_process_linear(signal_1.F1_VTX1, signal_1.shift_vector,...
                                                          signal_2.F1_VTX1, signal_2.shift_vector, ...
                                                          signal_3.F1_VTX1, signal_3.shift_vector, ...
                                                          signal_4.F1_VTX1, signal_4.shift_vector);
    superres_signal.F1_VTX2 = img_superres_process_linear(signal_1.F1_VTX2, signal_1.shift_vector,...
                                                          signal_2.F1_VTX2, signal_2.shift_vector, ...
                                                          signal_3.F1_VTX2, signal_3.shift_vector, ...
                                                          signal_4.F1_VTX2, signal_4.shift_vector);
    superres_signal.F2_VTX1 = img_superres_process_linear(signal_1.F2_VTX1, signal_1.shift_vector,...
                                                          signal_2.F2_VTX1, signal_2.shift_vector, ...
                                                          signal_3.F2_VTX1, signal_3.shift_vector, ...
                                                          signal_4.F2_VTX1, signal_4.shift_vector);
    superres_signal.F2_VTX2 = img_superres_process_linear(signal_1.F2_VTX2, signal_1.shift_vector,...
                                                          signal_2.F2_VTX2, signal_2.shift_vector, ...
                                                          signal_3.F2_VTX2, signal_3.shift_vector, ...
                                                          signal_4.F2_VTX2, signal_4.shift_vector);
    superres_signal.F3_VTX1 = img_superres_process_linear(signal_1.F3_VTX1, signal_1.shift_vector,...
                                                          signal_2.F3_VTX1, signal_2.shift_vector, ...
                                                          signal_3.F3_VTX1, signal_3.shift_vector, ...
                                                          signal_4.F3_VTX1, signal_4.shift_vector);
    superres_signal.F3_VTX2 = img_superres_process_linear(signal_1.F3_VTX2, signal_1.shift_vector,...
                                                          signal_2.F3_VTX2, signal_2.shift_vector, ...
                                                          signal_3.F3_VTX2, signal_3.shift_vector, ...
                                                          signal_4.F3_VTX2, signal_4.shift_vector);
    superres_signal.F4_VTX1 = img_superres_process_linear(signal_1.F4_VTX1, signal_1.shift_vector,...
                                                          signal_2.F4_VTX1, signal_2.shift_vector, ...
                                                          signal_3.F4_VTX1, signal_3.shift_vector, ...
                                                          signal_4.F4_VTX1, signal_4.shift_vector);
    superres_signal.F4_VTX2 = img_superres_process_linear(signal_1.F4_VTX2, signal_1.shift_vector,...
                                                          signal_2.F4_VTX2, signal_2.shift_vector, ...
                                                          signal_3.F4_VTX2, signal_3.shift_vector, ...
                                                          signal_4.F4_VTX2, signal_4.shift_vector);

    % diffencial value
    superres_signal.delta_F1 = superres_signal.F1_VTX2 - superres_signal.F1_VTX1 + superres_signal.F3_VTX1 - superres_signal.F3_VTX2;
    superres_signal.delta_F2 = superres_signal.F2_VTX2 - superres_signal.F2_VTX1 + superres_signal.F4_VTX1 - superres_signal.F4_VTX2;
    % intensity value
    superres_signal.intensity = superres_signal.F1_VTX1 + superres_signal.F1_VTX1 + superres_signal.F2_VTX1 + superres_signal.F2_VTX2...
                              + superres_signal.F3_VTX1 + superres_signal.F3_VTX2 + superres_signal.F4_VTX1 + superres_signal.F4_VTX2;

end


function [superres_frame] = img_superres_process_linear(frame_1, shitf_1, frame_2, shitf_2, frame_3, shitf_3, frame_4, shitf_4)
%SUPERRES_PROCESS 此处显示有关此函数的摘要
%   此处显示详细说明

    % scale up
    frame_1 = imresize(frame_1, 2, "nearest");
    frame_2 = imresize(frame_2, 2, "nearest");
    frame_3 = imresize(frame_3, 2, "nearest");
    frame_4 = imresize(frame_4, 2, "nearest");
    % pixel shift (with scaled shift vector)
    frame_1 = imtranslate(frame_1, 2*(shitf_1-shitf_1), 'FillValues',0);
    frame_2 = imtranslate(frame_2, 2*(shitf_2-shitf_1), 'FillValues',0);
    frame_3 = imtranslate(frame_3, 2*(shitf_3-shitf_1), 'FillValues',0);
    frame_4 = imtranslate(frame_4, 2*(shitf_4-shitf_1), 'FillValues',0);
    % combine
    superres_frame = (frame_1 + frame_2 + frame_3 + frame_4) / 4;

end
